buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'docker'
apply plugin: 'findbugs'
//apply plugin: 'checkstyle'

findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    effort = "default"
    reportLevel = "high"
}

//checkstyle {
//    toolVersion = '8.3'
//    sourceSets= [sourceSets.main]
//    ignoreFailures = true
//}

version = '4.0.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-webflux'

    compile 'com.google.code.gson:gson'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0'
    compile 'net.minidev:json-smart:1.0.8'
    compile 'com.google.guava:guava:22.0'
    compile 'org.modelmapper:modelmapper:0.7.5'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    compile 'org.apache.commons:commons-lang3:3.7'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.projectreactor:reactor-test'
    testCompile 'br.com.six2six:fixture-factory:3.1.0'
}

bootRun {
    String activeProfile =  System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    sourceSets sourceSets.main
    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}


task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = 'elemental-source/' + jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

